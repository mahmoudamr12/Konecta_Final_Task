pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = 'my-image'
        IMAGE_TAG = 'latest'
        AWS_ACCOUNT_ID = credentials('aws-credential')
        // These two will be initialized dynamically in the script block
        // ENVIRONMENT and NAMESPACE will be set based on the branch name
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
                script {
                    // Set ENVIRONMENT and NAMESPACE from branch name
                    env.ENVIRONMENT = env.BRANCH_NAME
                    env.NAMESPACE = env.BRANCH_NAME
                    env.REPO_URL = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.ECR_REPO}"
                }
            }
        }

        stage('AWS Operations') {
            steps {
                withAWS(credentials: 'aws-creds', region: "${env.AWS_REGION}") {
                    sh 'aws --version'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    cd docker
                    docker build -t $ECR_REPO:$IMAGE_TAG .
                    docker tag $ECR_REPO:$IMAGE_TAG $REPO_URL:$IMAGE_TAG
                '''
            }
        }

        stage('Push to ECR') {
            steps {
                withAWS(credentials: 'aws-creds', region: "${env.AWS_REGION}") {
                    sh '''
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPO_URL
                        docker push $REPO_URL:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: "${env.AWS_REGION}") {
                        sh """
                            aws eks update-kubeconfig --region $AWS_REGION --name private-eks-cluster
                            cd kubernetes

                            # Replace placeholders
                            sed -i "s|{{ENVIRONMENT}}|${env.ENVIRONMENT}|g" configmap.yaml
                            sed -i "s|{{IMAGE}}|${env.REPO_URL}:${env.IMAGE_TAG}|g" deployment.yaml
                            sed -i "s|{{NAMESPACE}}|${env.NAMESPACE}|g" deployment.yaml

                            kubectl create namespace ${env.NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -

                            # Apply manifests
                            kubectl apply -n ${env.NAMESPACE} -f configmap.yaml
                            kubectl apply -n ${env.NAMESPACE} -f deployment.yaml
                            kubectl apply -n ${env.NAMESPACE} -f service.yaml
                            kubectl apply -n ${env.NAMESPACE} -f redis-service.yml
                            kubectl apply -n ${env.NAMESPACE} -f redis-deployment.yml
                        """
                    }
                }
            }
        }
    }
}
