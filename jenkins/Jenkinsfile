pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = 'my-image'
        IMAGE_TAG = 'latest'
        AWS_ACCOUNT_ID = credentials('aws-credential')
        REPO_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
                // script {
                //     if (env.BRANCH_NAME == 'test') {
                //         env.ENVIRONMENT = 'test'
                //         env.NAMESPACE = 'test'
                //     } else if (env.BRANCH_NAME == 'prod') {
                //         env.ENVIRONMENT = 'prod'
                //         env.NAMESPACE = 'prod'
                //     } else {
                //         error("Unsupported branch: ${env.BRANCH_NAME}")
                //     }
                // }
            }
        }

        stage('AWS Operations') {
            steps {
                withAWS(credentials: 'aws-creds', region: "${env.AWS_REGION}") {
                    sh 'aws --version'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    cd docker
                    docker build -t $ECR_REPO:$IMAGE_TAG .
                    docker tag $ECR_REPO:$IMAGE_TAG $REPO_URL:$IMAGE_TAG
                '''
            }
        }

        stage('Push to ECR') {
            steps {
                withAWS(credentials: 'aws-creds', region: "${env.AWS_REGION}") {
                    sh '''
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPO_URL
                        docker push $REPO_URL:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: "${env.AWS_REGION}") {
                        sh """
                            aws eks update-kubeconfig --region $AWS_REGION --name private-eks-cluster
                            cd kubernetes

                            # Create namespace if not exists
                            kubectl create namespace ${env.BRANCH_NAME} --dry-run=client -o yaml | kubectl apply -f -

                            # Process and apply all manifests with environment replacement
                            sed -e "s|{{ENVIRONMENT}}|${env.BRANCH_NAME}|g" configmap.yaml | kubectl apply -n ${env.BRANCH_NAME} -f -
                            sed -e "s|{{IMAGE}}|${env.REPO_URL}:${env.IMAGE_TAG}|g" -e "s|{{ENVIRONMENT}}|${env.BRANCH_NAME}|g" deployment.yaml | kubectl apply -n ${env.BRANCH_NAME} -f -
                            sed -e "s|{{ENVIRONMENT}}|${env.BRANCH_NAME}|g" service.yaml | kubectl apply -n ${env.BRANCH_NAME} -f -
                            sed -e "s|{{ENVIRONMENT}}|${env.BRANCH_NAME}|g" redis-service.yml | kubectl apply -n ${env.BRANCH_NAME} -f -
                            sed -e "s|{{ENVIRONMENT}}|${env.BRANCH_NAME}|g" redis-deployment.yml | kubectl apply -n ${env.BRANCH_NAME} -f -
                        """
                    }
                }
            }
        }
    }
}
