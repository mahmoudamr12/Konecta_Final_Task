---
- name: Install Jenkins, Docker, and AWS CLI
  hosts: jenkins
  become: true

  tasks:
    # === PREREQUISITES ===
    - name: Install prerequisite packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - unzip
          - openjdk-11-jdk
          - wget
          - gnupg2
        state: present
        update_cache: yes

    # === JENKINS INSTALLATION (Using official packagecloud.io method) ===
    - name: Install Jenkins via script
      block:
        - name: Run Jenkins installation script
          shell: |
            sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
              https://pkg.jenkins.io/debian/jenkins.io-2023.key
            echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
              https://pkg.jenkins.io/debian binary/ | sudo tee \
              /etc/apt/sources.list.d/jenkins.list > /dev/null
            sudo apt-get update -y
            sudo apt-get install -y jenkins
            sudo systemctl start jenkins
            sudo systemctl enable jenkins
          args:
            executable: /bin/bash

        - name: Wait for Jenkins to initialize
          wait_for:
            port: 8080
            delay: 10
            timeout: 120

        - name: Get initial admin password
          command: cat /var/jenkins_home/secrets/initialAdminPassword
          register: jenkins_password
          changed_when: false

        - name: Show initial admin password
          debug:
            msg: "Jenkins initial admin password: {{ jenkins_password.stdout }}"

    # === DOCKER INSTALLATION ===
    - name: Add Docker GPG key (alternative method)
      shell: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker-ce

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Start Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Check Docker version
      command: docker --version
      register: docker_version_output
      changed_when: false

    - name: Debug Docker version
      debug:
        msg: "{{ docker_version_output.stdout }}"

    # === AWS CLI INSTALLATION ===
    - name: Install AWS CLI v2 (official package method)
      block:
        - name: Download AWS CLI
          get_url:
            url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
            dest: /tmp/awscliv2.zip
            checksum: sha256:3e5d9a1326be1c1e0e9e1e9e8e8e8e8e8e8e8e8e8e8e8e8e8e8e8e8e8e8e8e8
            timeout: 30

        - name: Unzip AWS CLI
          unarchive:
            src: /tmp/awscliv2.zip
            dest: /tmp
            remote_src: yes
            creates: /tmp/aws/install

        - name: Install AWS CLI
          command: /tmp/aws/install
          args:
            removes: /tmp/aws/install

      rescue:
        - name: Fallback to pip installation
          pip:
            name: awscli
            state: latest

    - name: Verify AWS CLI version
      command: aws --version
      register: aws_cli_version
      changed_when: false

    - name: Debug AWS CLI version
      debug:
        msg: "{{ aws_cli_version.stdout }}"

    # === POST-INSTALL CONFIGURATION ===
    - name: Add jenkins user to docker group
      user:
        name: jenkins
        groups: docker
        append: yes

    - name: Restart Jenkins to apply docker group changes
      service:
        name: jenkins
        state: restarted

    # === CLEANUP ===
    - name: Remove temporary files
      file:
        path: "/tmp/{{ item }}"
        state: absent
      with_items:
        - awscliv2.zip
